#creamos redes
networks:
  hasher:
    internal: true
  redis:
    internal: true
  rng:
    internal: true
  webui:
    internal: false
  worker:
    internal: true
#balanceadores de carga (servicios)
services:
  hasher:
    deploy:
      mode: replicated
      placement:
        constraints:
        # altratarse de una lista de string no hace falta poner el - aparte
          - node.role == worker
      replicas: 1
      resources:
        limits:
          cpus: "0.1"
          memory: 100M
        #ojo que a veces el reservar a full puede ser cara
        reservations:
          cpus: "0.1"
          memory: 100M
    expose:
      #no saltamos de linea ya q no es un objeto sino un string
      - 8080
    healthcheck:
      interval: 10s
      retries: 3
      start_period: 30s
      test: wget -q --spider localhost:8080
      timeout: 1s
    # para diferentes microservicios  
    image: crivases/dockercoins:latest-hasher
    #1 proyecto x Ms -> image: crivases/dockercoins-haser:latest
    networks:
      #la q hemos declarado en networks
      - hasher
  redis:
    deploy:
      mode: replicated
      placement:
        constraints:
        # altratarse de una lista de string no hace falta poner el - aparte
          - node.role == worker
      replicas: 1
      resources:
        limits:
          cpus: "0.1"
          memory: 100M
        #ojo que a veces el reservar a full puede ser cara
        reservations:
          cpus: "0.1"
          memory: 100M
    expose:
      #no saltamos de linea ya q no es un objeto sino un string
      - 6379
    healthcheck:
      interval: 10s
      retries: 3
      start_period: 30s
      test: redis-cli
      timeout: 1s
    image: redis:6.0.9-alpine3.12@sha256:aa31e6d2afc72d2222ed3953587197c324f615861771637a64053f9d99ba4b74
    networks:
      #la q hemos declarado en networks
      - redis
    volumes:
      # para openshift 
      - redis:/data
  rng:
    deploy:
      #se llama DaemonSet y se depliega sola una vez por worker, tiene sentido en nuemero aleatorios , login
      mode: global
      placement:
        constraints:
        # altratarse de una lista de string no hace falta poner el - aparte
          - node.role == worker
      # replicas: 1 no puede haber replicas
      resources:
        limits:
          cpus: "0.1"
          memory: 100M
        #ojo que a veces el reservar a full puede ser cara
        reservations:
          cpus: "0.1"
          memory: 100M
    expose:
      #no saltamos de linea ya q no es un objeto sino un string
      - 8080
    healthcheck:
      interval: 10s
      retries: 3
      start_period: 30s
      test: wget -q --spider localhost:8080
      timeout: 1s
    image: crivases/dockercoins:latest-rng
    networks:
      #la q hemos declarado en networks
      - rng
  webui:
    deploy:
      mode: replicated
      placement:
        constraints:
        # altratarse de una lista de string no hace falta poner el - aparte
          - node.role == worker
      replicas: 1 
      resources:
        limits:
          cpus: "0.1"
          memory: 100M
        #ojo que a veces el reservar a full puede ser cara
        reservations:
          cpus: "0.1"
          memory: 100M
    expose:
      #no saltamos de linea ya q no es un objeto sino un string
      - 8080
    healthcheck:
      interval: 10s
      retries: 3
      start_period: 30s
      #podemos usar curl ya que si lo tiene la imagen
      #podemos comprobarlo con docker run --rm XXX which curl y asi sabemos si lo tiene
      test: curl -f localhost:8080
      timeout: 1s
    image: crivases/dockercoins:latest-webui
    networks:
      # se conecta con redes, por lo que lo especificamos (dos tarjetas de red) (podria usar se un proxy en DMZ)
      - redis
      #la q hemos declarado en networks
      - webui
  worker:
    deploy:
      mode: replicated
      placement:
        constraints:
          - node.role == worker
      replicas: 1
      resources:
        limits:
          cpus: "0.1"
          memory: 100M
        #ojo que a veces el reservar a full puede ser cara
        reservations:
          cpus: "0.1"
          memory: 100M
    #no se expone puertos
    #expose:
    #  - 8080
    healthcheck:
      interval: 10s
      retries: 3
      start_period: 30s
      test: netstat -nt | grep ESTABLISHED | grep -q 6379
      timeout: 1s
    image: crivases/dockercoins:latest-worker
    networks:
      # listar las que necesita
      - hasher
      - redis
      - rng
      #la q hemos declarado en networks
      - worker
version: '3.8'      
volumes:
  #se crea uno vacio
  redis:
    
  
  
        
